/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aesimplementation;

import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.codec.binary.Base64;

/**
 *
 * @author Petricioiu
 */
public class LeFrame extends javax.swing.JFrame {

    /**
     * Creates new form LeFrame
     */
    public LeFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextTextField = new javax.swing.JTextArea();
        keyTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cipherTextTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        plainTextTextField.setColumns(20);
        plainTextTextField.setRows(5);
        plainTextTextField.setText("abcdefghijklmnopabcdefghijklmnop");
        plainTextTextField.setWrapStyleWord(true);
        jScrollPane1.setViewportView(plainTextTextField);

        keyTextField.setText("1234567890123456");

        jLabel1.setText("Key");

        jLabel2.setText("Plain text");

        jLabel3.setText("Cipher text");

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 17, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                            .addComponent(keyTextField)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cipherTextTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cipherTextTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //encripting

        String plainText = plainTextTextField.getText();
        String key = keyTextField.getText();

        FileSystem fileSystem = FileSystem.getInstance();
        fileSystem.setFilePath("C:\\Users\\Petricioiu\\Documents\\develop\\facultate\\AI\\AESImplementation\\sBoxMatrix.txt");
        byte[][] sBoxMatrix = fileSystem.readSBoxMatrix();

        Cipher cipher = new Cipher();
        cipher.setRCon();
        cipher.setSBox(sBoxMatrix);
        cipher.setLeGivenMatrix(false);

        int plainTextLength = plainText.length();

        if (plainTextLength > 16) {

            StringBuffer cipherTextBuffer = new StringBuffer();
            int i = 0;
            while (i < plainTextLength) {

                int nextChunkLength = plainTextLength - i;
                String chunk;
                if (nextChunkLength > 16) {
                    chunk = plainText.substring(i, i + 16);
                } else {
                    chunk = plainText.substring(i, i + nextChunkLength);
                }

                cipher.buildCipherKey(key);
                cipher.buildState(chunk);
                cipher.encrypt();
                try {
                    cipherTextBuffer.append(cipher.getCipherText());
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(LeFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                i += 16;
            }

            cipherTextTextField.setText(cipherTextBuffer.toString());

        } else {
            cipher.buildCipherKey(key);
            cipher.buildState(plainText);
            cipher.encrypt();
            try {
                cipherTextTextField.setText(cipher.getCipherText());
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(LeFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //decripting 
        FileSystem fileSystem = FileSystem.getInstance();
        fileSystem.setFilePath("C:\\Users\\Petricioiu\\Documents\\develop\\facultate\\AI\\AESImplementation\\sBoxMatrix.txt");
        byte[][] sBoxMatrix = fileSystem.readSBoxMatrix();

        String cip = cipherTextTextField.getText();
        int cipLen = cip.length();
        
        String key = keyTextField.getText();

        Cipher cipher = new Cipher();
        cipher.setRCon();
        cipher.setSBox(sBoxMatrix);
        cipher.setLeGivenMatrix(false);
        String cipherText = new String(Base64.decodeBase64(cipherTextTextField.getText().getBytes()));
        int cipherTextLength = cip.length();
        StringBuffer cipherTextBuffer = new StringBuffer();

        if (cipherTextLength > 44) {
          //  cipherText = new String(Base64.decodeBase64(cipherTextTextField.getText().getBytes()));
            int i = 0;
            while (i < cipherTextLength) {
                int nextChunkLength = cipherTextLength - i;
                String chunk;
                if (nextChunkLength > 44) {
                    System.out.println(cip.substring(i, i + 44));
                    chunk = new String(Base64.decodeBase64(cip.substring(i, i + 44).getBytes()));
                } else {
                    System.out.println(cip.substring(i, i + nextChunkLength));
                    chunk = new String(Base64.decodeBase64(cip.substring(i, i + nextChunkLength).getBytes()));
                }
                try {
                    int chunkLen = chunk.length();
                    cipher.setSBox(sBoxMatrix);
                    cipherTextBuffer.append(cipher.decryptCipheredText(chunk, key));
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(LeFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                i += 44;
            }

            plainTextTextField.setText(cipherTextBuffer.toString());
        } else {
            try {
                plainTextTextField.setText(cipher.decryptCipheredText(cipherText, key));
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(LeFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cipherTextTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyTextField;
    private javax.swing.JTextArea plainTextTextField;
    // End of variables declaration//GEN-END:variables
}
